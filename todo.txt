OK		Message d'erreur si textures manquantes/pas le bon nom
OK		Bloquer si espace dans la map
OK		Traiter les couleurs du plafond et du sol
OK		Leak 1 octet si texture manquante dans le fichier de la map (map 14)
OK		Message erreur si fichier .cub pour la map (map 2)
OK		Arreter le programme si valeur non numeric pour sol ou plafond (map 15)
OK		Si pas de map --> segault (map 4)
		==13680== Invalid read of size 1
		==13680==    at 0x404E2A: control_char_map (init_map.c:21)
		==13680==    by 0x404D51: init_map (init_map.c:124)
		==13680==    by 0x404A6E: init_data (init_data.c:84)
		==13680==    by 0x40256E: main (cub3d.c:33)
		==13680==  Address 0x0 is not stack'd, malloc'd or (recently) free'd

(Ajouter un offset sur les deplacement lateraux)

BONUS :
- Image ciel ok

- Minimap
	- Affichage ok
		voir si possible de deplacer de façon smooth la map, pas case par case ?
	- Afficher l'orientation du joueur
- Ennemis
- Sprites animes

- Rotation avec la souris
- Portes

- Armes ?

Variables traitement :
double sprite_x;
double sprite_y;
double invDet;
double transform_x;
double transform_y;
int sprite_screen_x;
int sprite_height;
int draw_start_y;
int draw_end_y;
int sprite_width;
int draw_start_x;
int draw_end_x;
int stripe;

Affichage des sprites :

Structure Sprites :
double x
double y
int *texture

--> Créer une liste des sprites [0 -> nb_sprites]

double ZBuffer[SCR_WIDTH]

int sprite_order[nb_sprites]
double sprite_distance[nb_sprites]

--> Tri à bulle pour les sprites

1. Charger les textures des sprites
A la fin du raycast :
Init ZBuffer : ZBuffer[x] = perp_wall_dist;

2. Init des tableaux sprite order et distance
3. Tri des tableaux
4. Boucle pour chaque sprite :
	Convertir la position du sprite par rapport à la caméra
	Calculer l'inverse de la matrice de la caméra (affichage à l'endroit ?)
	Transformer les coordonnées du sprite
	Caclul de la position x dans l'écran
	Calcul de la hauteur du sprite à l'écran
	Calcul du point de départ et de fin du dessin sur l'axe y
	Calcul de la largeur du sprite
	Calcul du point de départ et de fin du dessin sur l'axe x
	Dessiner chaque ligne verticale du sprite
